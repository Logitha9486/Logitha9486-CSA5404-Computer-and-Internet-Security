import hashlib 
 
# Function to compute hash values for a given file using MD5, SHA-256, and SHA- 
512 
def compute_hash(file_path): 
# Create empty dictionaries to store the hash values 
hashes = {"MD5": "", "SHA-256": "", "SHA-512": ""} 
# Open the file in binary mode 
with open(file_path, 'rb') as file: 
# Read the file in chunks to avoid memory overflow for large files 
file_data = file.read() 
# MD5 hash calculation 
md5_hash = hashlib.md5() 
md5_hash.update(file_data) 
hashes["MD5"] = md5_hash.hexdigest() 
# SHA-256 hash calculation 
sha256_hash = hashlib.sha256() 
sha256_hash.update(file_data) 
hashes["SHA-256"] = sha256_hash.hexdigest() 
# SHA-512 hash calculation 
sha512_hash = hashlib.sha512() 
sha512_hash.update(file_data) 
hashes["SHA-512"] = sha512_hash.hexdigest() 
return hashes 
# Function to compare hash values 
def compare_hashes(hashes): 
print(f"MD5 Hash: {hashes['MD5']}") 
print(f"SHA-256 Hash: {hashes['SHA-256']}") 
print(f"SHA-512 Hash: {hashes['SHA-512']}") 
if  name  == " main ": 
file_path = input("Enter the path of the file to hash: ") 
hashes = compute_hash(file_path) 
compare_hashes(hashes) 

//output
Enter file path: example.zip

=== File Integrity Hashes ===
MD5:    1a79a4d60de6718e8e5b326e338ae533
SHA-256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
SHA-512: cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318a23fbd8c4cf97b60f988fa5ac19fc1e515df8b6e0c

Enter expected hash (optional, press Enter to skip): e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
âœ… File integrity verified!
